RÉPONSES AUX QUESTIONS D'EXAMEN - PROJET LOCADRIVE (PARTIE 1)
==========================================================

ARCHITECTURE MVC ET GESTION DES ÉVÉNEMENTS
------------------------------------------
1. L'architecture MVC de l'application LocaDrive est structurée comme suit :
   - Modèle : Représenté par l'interface DataAccessLayer et son implémentation DAOLocation, qui gèrent les données et la logique métier. Le modèle contient les entités (Car, Client, Contrat, Reservation) et les mécanismes de persistance.
   - Vue : Implémentée par les classes dans le package view, notamment les formulaires GUI comme ModifyClientForm. La vue est responsable de l'affichage des données et de la capture des interactions utilisateur.
   - Contrôleur : La classe Controller qui implémente ActionListener et gère les événements de l'interface utilisateur. Elle fait le lien entre la vue et le modèle en traitant les actions utilisateur et en mettant à jour les données.

2. Le pattern Observer est implémenté entre la vue et le contrôleur via l'interface ActionListener de Java. Dans le code :
   - La vue enregistre le contrôleur comme écouteur d'événements : view.setController(this)
   - Les composants GUI (boutons, menus) déclenchent des événements ActionEvent
   - Le contrôleur implémente ActionListener et sa méthode actionPerformed traite ces événements
   - Exemple : Dans ModifyClientForm, les boutons déclenchent des actions qui sont traitées par le contrôleur.

3. Dans la classe Controller, la gestion des événements est centralisée dans la méthode actionPerformed qui utilise un switch-case pour distribuer les actions :
   ```java
   public void actionPerformed(ActionEvent e) {
       String command = e.getActionCommand();
       System.out.println("Action reçue: " + command);
       
       switch (command) {
           case ControllerActions.ADD_CAR:
               handleAddCar();
               break;
           case ControllerActions.MODIFY_CAR:
               handleModifyCar();
               break;
           // Autres cas...
       }
   }
   ```
   Chaque action est ensuite traitée par une méthode dédiée (handleAddCar, handleModifyCar, etc.), ce qui améliore la lisibilité et la maintenabilité du code.

4. Exemple d'interaction pour l'ajout d'une voiture :
   - L'utilisateur clique sur le bouton "Ajouter une voiture" dans l'interface
   - La vue génère un ActionEvent avec la commande ControllerActions.ADD_CAR
   - Le contrôleur reçoit l'événement dans actionPerformed et appelle handleAddCar()
   - handleAddCar() vérifie si l'utilisateur est connecté, puis appelle view.promptAddCar() pour afficher un formulaire
   - L'utilisateur remplit le formulaire et confirme
   - Le contrôleur reçoit l'objet Car créé et appelle model.addCar(car) pour l'ajouter au modèle
   - Le modèle (DAOLocation) ajoute la voiture à la collection cars et sauvegarde les données via saveData()
   - Le contrôleur appelle updateAllTables() pour rafraîchir l'affichage

5. Le contrôleur est structuré avec une méthode principale actionPerformed qui délègue à des méthodes spécifiques (handle*). Cette approche facilite l'ajout de nouvelles fonctionnalités car il suffit d'ajouter un nouveau cas dans le switch et une nouvelle méthode handle*. Cette structure respecte le principe de responsabilité unique en séparant la logique de chaque action.

6. La communication entre le contrôleur et la vue pour la mise à jour des tables se fait via des méthodes dédiées :
   - Le contrôleur appelle updateAllTables() après chaque modification des données
   - Cette méthode appelle des méthodes spécifiques dans la vue comme updateCarsTable(), updateClientsTable(), etc.
   - Ces méthodes récupèrent les données à jour depuis le modèle et rafraîchissent les tables correspondantes

7. Pour éviter le couplage fort entre les couches :
   - Utilisation d'interfaces (DataAccessLayer) pour découpler le contrôleur de l'implémentation concrète du modèle
   - Communication via des méthodes bien définies plutôt que par accès direct aux attributs
   - Séparation claire des responsabilités entre les couches
   - Utilisation du pattern Observer pour la communication vue-contrôleur

8. La gestion des erreurs dans le contrôleur est implémentée par :
   - Des vérifications préalables (ex: vérifier si l'utilisateur est connecté avant d'autoriser certaines actions)
   - Des blocs try-catch pour capturer les exceptions
   - L'affichage de messages d'erreur à l'utilisateur via view.showMessage()
   - Exemple : Dans handleAddClient(), si une exception se produit lors de l'ajout d'un client, un message d'erreur est affiché à l'utilisateur.

PRINCIPES SOLID
--------------
9. Exemples d'application des principes SOLID :
   - Single Responsibility Principle (SRP) : La classe DAOLocation est responsable uniquement de la persistance des données, tandis que Controller gère uniquement les interactions utilisateur.
   - Open/Closed Principle (OCP) : L'interface DataAccessLayer permet d'étendre les fonctionnalités sans modifier le code existant.
   - Dependency Inversion Principle (DIP) : Le contrôleur dépend de l'abstraction DataAccessLayer plutôt que de l'implémentation concrète DAOLocation.

10. L'interface DataAccessLayer illustre principalement :
    - Le principe d'inversion de dépendance (DIP) : Les modules de haut niveau (Controller) dépendent d'abstractions plutôt que de détails d'implémentation.
    - Le principe ouvert/fermé (OCP) : L'application peut être étendue avec de nouvelles implémentations de DataAccessLayer sans modifier le code existant.
    Avantages : Facilité de test (possibilité de créer des mocks), flexibilité pour changer l'implémentation (ex: passer de fichiers sérialisés à une base de données), et découplage des composants.

11. Le principe de substitution de Liskov est respecté dans la hiérarchie de classes d'authentification :
    - LoginTemplate est une classe abstraite définissant le comportement général
    - PropertiesLogin est une sous-classe qui implémente les méthodes abstraites
    - On peut utiliser PropertiesLogin partout où LoginTemplate est attendu sans changer le comportement du programme
    - Exemple : Le contrôleur utilise LoginTemplate mais travaille avec une instance de PropertiesLogin.

12. Le principe de responsabilité unique (SRP) dans le contrôleur est appliqué en séparant les méthodes de gestion d'événements :
    - La méthode actionPerformed a une seule responsabilité : router les événements vers les méthodes appropriées
    - Chaque méthode handle* a une responsabilité unique (ex: handleAddCar gère uniquement l'ajout de voitures)
    Cette séparation facilite la maintenance, améliore la lisibilité et permet de tester chaque fonctionnalité indépendamment.

13. Le principe d'ouverture/fermeture (OCP) est respecté par :
    - L'utilisation d'interfaces comme DataAccessLayer qui permettent d'ajouter de nouvelles implémentations sans modifier le code existant
    - L'énumération StatutContrat qui peut être étendue avec de nouveaux statuts sans modifier le code qui l'utilise
    - Le pattern Template Method dans LoginTemplate qui permet de créer de nouvelles stratégies d'authentification sans modifier le flux principal

14. Le principe d'inversion de dépendance (DIP) est utilisé via :
    - L'interface DataAccessLayer qui sert d'abstraction entre le contrôleur et l'implémentation concrète
    - Le constructeur du Controller qui accepte une implémentation de DataAccessLayer plutôt qu'une classe concrète
    Avantage : Le contrôleur peut fonctionner avec n'importe quelle implémentation de DataAccessLayer, ce qui facilite les tests et permet de changer l'implémentation sans modifier le contrôleur.
