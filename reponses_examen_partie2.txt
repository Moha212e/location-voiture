RÉPONSES AUX QUESTIONS D'EXAMEN - PROJET LOCADRIVE (PARTIE 2)
==========================================================

PERSISTANCE DES DONNÉES
----------------------
15. La sérialisation des objets dans la classe DAOLocation est implémentée comme suit :
    - Les données sont stockées dans des Map<K,V> (reservations, cars, contracts, clients)
    - La méthode saveData() sauvegarde ces collections dans des fichiers sérialisés :
    ```java
    public void saveData() {
        try {
            // Sauvegarder les compteurs
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(COUNTERS_FILE))) {
                Map<String, Integer> counters = new HashMap<>();
                counters.put("reservationId", reservationIdGenerator.get());
                counters.put("carId", carIdGenerator.get());
                counters.put("contractId", contractIdGenerator.get());
                counters.put("clientId", clientIdGenerator.get());
                oos.writeObject(counters);
            }
            
            // Sauvegarder les voitures
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(CARS_FILE))) {
                oos.writeObject(cars);
            }
            
            // Sauvegarder les clients
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(CLIENTS_FILE))) {
                oos.writeObject(clients);
            }
            
            // Sauvegarder les contrats
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(CONTRACTS_FILE))) {
                oos.writeObject(contracts);
            }
            
            // Sauvegarder les réservations
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(RESERVATIONS_FILE))) {
                oos.writeObject(reservations);
            }
        } catch (IOException e) {
            System.err.println("Erreur lors de la sauvegarde des données: " + e.getMessage());
        }
    }
    ```
    - La méthode loadData() charge ces collections depuis les fichiers sérialisés en utilisant ObjectInputStream

16. Avantages de la sérialisation Java pour la persistance des données :
    - Simplicité d'implémentation : peu de code nécessaire pour sauvegarder et charger des objets
    - Conservation de la structure objet : les relations entre objets sont préservées
    - Performance acceptable pour de petites applications
    
    Inconvénients :
    - Format binaire propriétaire : difficile à lire/modifier manuellement
    - Problèmes de compatibilité lors des mises à jour de classes (serialVersionUID)
    - Moins performant et moins flexible qu'une base de données pour les grandes applications
    - Difficile à partager avec d'autres systèmes non-Java

17. Le processus de chargement des données au démarrage de l'application :
    - Le constructeur de DAOLocation initialise les collections vides et appelle loadData()
    - loadData() charge d'abord les compteurs d'ID depuis COUNTERS_FILE
    - Ensuite, les entités sont chargées dans un ordre spécifique pour gérer les dépendances :
      1. Les voitures (entités indépendantes)
      2. Les clients (entités indépendantes)
      3. Les contrats (dépendent des réservations)
      4. Les réservations (dépendent des voitures et clients)
    - Pour gérer les dépendances entre entités, des ID sont stockés dans les objets (ex: carId dans Reservation) pour pouvoir reconstruire les relations après chargement

18. Exemple de test unitaire pour les opérations CRUD :
    ```java
    @Test
    public void testAddAndDeleteCar() {
        // Création d'une nouvelle voiture
        Car car = new Car("TEST123", "Toyota", "Corolla", 2020, 50.0, true);
        
        // Test de l'ajout
        int result = daoLocation.addCar(car);
        assertNotEquals(0, result); // Vérifie que l'ID a été généré
        
        // Récupération de la voiture ajoutée
        Car retrievedCar = daoLocation.getCarById("TEST123");
        assertNotNull(retrievedCar);
        assertEquals("Toyota", retrievedCar.getBrand());
        
        // Test de la suppression
        boolean deleted = daoLocation.deleteCar(car);
        assertTrue(deleted);
        
        // Vérification que la voiture a été supprimée
        retrievedCar = daoLocation.getCarById("TEST123");
        assertNull(retrievedCar);
    }
    ```

19. La gestion des identifiants uniques pour chaque entité est implémentée via des AtomicInteger :
    ```java
    private AtomicInteger reservationIdGenerator;
    private AtomicInteger carIdGenerator;
    private AtomicInteger contractIdGenerator;
    private AtomicInteger clientIdGenerator;
    ```
    Ces générateurs sont initialisés dans le constructeur et incrémentés à chaque création d'entité. Leur valeur est persistée dans le fichier COUNTERS_FILE pour garantir l'unicité des ID même après redémarrage de l'application. Cette approche thread-safe permet d'éviter les conflits d'ID en environnement concurrent.

20. Pour assurer l'intégrité des données lors de la désérialisation :
    - Utilisation de try-catch pour gérer les exceptions ClassNotFoundException et IOException
    - Vérification de l'existence des fichiers avant de tenter de les charger
    - Chargement des entités dans un ordre spécifique pour respecter les dépendances
    - Stockage des ID de référence plutôt que des objets complets pour éviter les références circulaires
    - Initialisation des collections vides en cas d'échec de chargement pour éviter les NullPointerException

21. Les relations entre entités sont gérées comme suit :
    - Les objets Reservation stockent les ID des objets liés (carId, clientId, contratId)
    - Lors de l'ajout d'une réservation, les références sont converties en ID :
    ```java
    if (reservation.getCar() != null) {
        String carId = reservation.getCar().getIdCar();
        reservation.setCarId(carId);
        reservation.setCarRegistration(carId);
    }
    ```
    - Lors du chargement, les relations sont reconstruites si nécessaire en utilisant ces ID
    - Cette approche évite les problèmes de sérialisation liés aux références circulaires

GESTION DES FICHIERS ET TEMPLATE METHOD
--------------------------------------
22. La gestion des fichiers properties pour l'authentification est implémentée dans la classe PropertiesLogin :
    - Le fichier properties est chargé dans le constructeur via loadProperties()
    - Les mots de passe sont stockés au format "password:role" pour chaque utilisateur
    - La vérification se fait dans authenticate() en comparant le mot de passe fourni avec celui stocké
    ```java
    protected boolean authenticate(String username, String encryptedPassword) {
        if (!userProperties.containsKey(username)) {
            return false;
        }
        
        String storedValue = userProperties.getProperty(username);
        String[] parts = storedValue.split(":");
        
        if (parts.length < 1) {
            return false;
        }
        
        String storedPassword = parts[0];
        return storedPassword.equals(encryptedPassword);
    }
    ```
    - Dans cette implémentation simple, les mots de passe ne sont pas chiffrés (encryptPassword retourne le mot de passe tel quel)

23. Le pattern "Template Method" est appliqué via la classe abstraite LoginTemplate :
    - La méthode template login() définit le flux d'authentification :
    ```java
    public final boolean login(String username, String password) {
        String encryptedPassword = encryptPassword(password);
        return authenticate(username, encryptedPassword);
    }
    ```
    - Les méthodes abstraites encryptPassword() et authenticate() sont implémentées par les sous-classes
    - PropertiesLogin fournit une implémentation concrète qui utilise un fichier properties
    
    Avantages de cette approche :
    - Réutilisation du code : le flux d'authentification est défini une seule fois
    - Flexibilité : possibilité d'ajouter facilement de nouvelles méthodes d'authentification
    - Cohérence : toutes les implémentations suivent le même processus global
    - Extension sans modification : on peut ajouter de nouvelles implémentations sans modifier le code existant

24. L'importation et l'exportation de données CSV sont gérées par les méthodes importXXX et exportXXX dans DAOLocation :
    - Pour l'importation, BufferedReader est utilisé pour lire le fichier ligne par ligne
    - Les lignes sont parsées pour créer des objets qui sont ajoutés aux collections
    - Pour l'exportation, BufferedWriter est utilisé pour écrire les données au format CSV
    - Exemple d'importation de clients :
    ```java
    public void importClients(String filePath) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean headerSkipped = false;
            
            while ((line = reader.readLine()) != null) {
                if (!headerSkipped) {
                    headerSkipped = true;
                    continue;
                }
                
                String[] data = line.split(",");
                if (data.length >= 6) {
                    Client client = new Client();
                    client.setIdClient(Integer.parseInt(data[0]));
                    client.setName(data[1]);
                    client.setSurname(data[2]);
                    client.setEmail(data[3]);
                    client.setPhoneNumber(data[4]);
                    client.setAddress(data[5]);
                    
                    addClient(client);
                }
            }
        }
    }
    ```

25. Structure des fichiers sérialisés :
    - Chaque type d'entité est stocké dans un fichier séparé (cars.ser, clients.ser, etc.)
    - Les données sont stockées sous forme de Map<K,V> sérialisées
    - Un fichier counters.ser stocke les valeurs des générateurs d'ID
    - La compatibilité lors des mises à jour est assurée par :
      - L'utilisation de serialVersionUID dans les classes d'entités
      - La gestion des champs manquants ou supprimés via des valeurs par défaut
      - Des vérifications de null et des conversions de type sécurisées lors du chargement

26. La classe LoginTemplate implémente les méthodes suivantes :
    - login() : méthode template finale qui définit le flux d'authentification
    - encryptPassword() : méthode abstraite pour chiffrer le mot de passe
    - authenticate() : méthode abstraite pour vérifier les credentials
    
    Cette classe abstraite facilite l'ajout de nouvelles méthodes d'authentification car :
    - Le flux principal est défini et ne peut être modifié (méthode finale)
    - Seules les étapes spécifiques doivent être implémentées dans les sous-classes
    - La cohérence est garantie entre toutes les implémentations
    - On peut facilement ajouter une nouvelle implémentation (ex: DatabaseLogin, LDAPLogin) sans modifier le code existant

27. Mesures pour sécuriser les informations sensibles dans les fichiers properties :
    - Stockage des mots de passe et des rôles séparément avec un délimiteur (:)
    - Possibilité d'implémenter le chiffrement des mots de passe via la méthode encryptPassword()
    - Gestion des droits d'accès au fichier properties au niveau du système d'exploitation
    - Validation des entrées utilisateur avant de les stocker dans le fichier

28. La gestion des erreurs lors de la lecture et de l'écriture des fichiers :
    - Utilisation de blocs try-catch pour capturer les exceptions
    - Journalisation des erreurs via System.err.println()
    - Création automatique des fichiers et répertoires manquants
    - Exemple de gestion d'erreur dans loadProperties() :
    ```java
    private void loadProperties() {
        try (InputStream input = new FileInputStream(propertiesFilePath)) {
            userProperties.load(input);
            System.out.println("Fichier properties chargé avec succès: " + propertiesFilePath);
        } catch (IOException e) {
            System.err.println("Erreur lors du chargement du fichier properties: " + e.getMessage());
            // Si le fichier n'existe pas, on le crée
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                try {
                    file.getParentFile().mkdirs(); // Crée les répertoires parents si nécessaire
                    file.createNewFile();
                    System.out.println("Fichier properties créé: " + propertiesFilePath);
                } catch (IOException ex) {
                    System.err.println("Erreur lors de la création du fichier properties: " + ex.getMessage());
                }
            }
        }
    }
    ```
